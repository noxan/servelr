#!/usr/bin/env node

'use strict';
var program = require('commander');
var connect = require('connect');
var connectLivereload = require('connect-livereload');
var serveStatic = require('serve-static');
var tinylr = require('tiny-lr');
var watch = require('node-watch');
var chalk = require('chalk');
var jade = require('jade');
var resolve = require('path').resolve;
var join = require('path').join;
var url = require('url');
var fs = require('fs');

program
  .version(require('../package.json').version)
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-R, --no-lr', 'disable livereload server')
  .option('-r, --lr-port <port>', 'specify the livereload port [35729]', Number, 35729)
  .option('-J, --no-jade', 'disable jade rendering')
  .option('-i, --ignore <regex>', 'specify regex to exclude files from livereload', String, '(~|\.sw(o|p))$')
  .parse(process.argv);


var path = resolve(program.args.shift() || '.');

var server = connect();


if (program.ignore) {
  program.ignore = new RegExp(program.ignore);
}

if (program.lr) {
  var lrserver = tinylr();
  lrserver.listen(program.lrPort);

  server.use(connectLivereload({
    port: program.lrPort
  }));

  if (!program.ignore) {
    console.log(chalk.yellow('Ignore for livereload disabled: This may trigger unwanted or multiple reloads for any kind of file change within this directory.'));
  }

  watch(path, function(filename) {
    if (!program.ignore || program.ignore.exec(filename)) {
      return;
    }
    console.log('File', chalk.grey(filename), 'reloaded.');
    lrserver.changed({
      body: {
        files: filename
      }
    });
  });
  console.log('Livereload listening on port %s.', chalk.cyan(program.lrPort));
}

if (program.jade) {
  server.use(function(req, res, next) {
    if (req.url.match(/\/$/)) { // try to load index.jade for base url path
      if (fs.existsSync(join(path, 'index.jade'))) {
        req.url = '/index.jade';
      }
    }
    if (!req.url.match(/\.jade$/)) {
      return next();
    }
    var filename = join(path, url.parse(req.url).pathname);
    fs.readFile(filename, 'utf8', function(err, str) {
      if (err) {
        return next(err);
      }
      try {
        var fn = jade.compile(str, { filename: filename });
        var result = fn();
        res.setHeader('Content-Type', 'text/html');
        res.setHeader('Content-Length', Buffer.byteLength(result));
        res.end(result);
      } catch (err) {
        next(err);
      }
    });
  });
}

server.use(serveStatic(path));
server.listen(program.port, function() {
  console.log('Serving directory %s on port %s.', chalk.grey(path), chalk.cyan(program.port));
});
